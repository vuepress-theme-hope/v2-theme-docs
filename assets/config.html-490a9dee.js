import{_ as d,r as l,o as u,c as h,f as g,a as t,w as s,b as n,e,g as a}from"./app-a38c4918.js";const f="/assets/vscode-hint-light-829d10ed.png",m="/assets/vscode-hint-dark-c5d6cf83.png",v="/assets/vscode-error-light-3c214af5.png",k="/assets/vscode-error-dark-4177ebab.png",y="/assets/vscode-autocomplete-light-3523f41e.png",_="/assets/vscode-autocomplete-dark-ff24938c.png",b={},w=e("p",null,"This tutorial guides you on how to configure a VuePress project.",-1),C=a('<h2 id="configure-vuepress" tabindex="-1"><a class="header-anchor" href="#configure-vuepress" aria-hidden="true">#</a> Configure VuePress</h2><p>Without config files, a VuePress project can only achieve limited functionality by default, so to better customize your website, VuePress provides config files.</p><p>VuePress uses <code>.vuepress</code> folder inside the docs folder to store configuration, and all VuePress related files will be placed here.</p><p>For a VuePress site, <code>.vuepress/config.ts</code> (or <code>.vuepress/config.js</code>) is the necessary config file.</p><div class="hint-container tip"><p class="hint-container-title">Use TS configuration file</p><p>We recommend you to use TypeScript config files for better type hinting, autocompletion and error checking.</p><p>If you are not familiar with TypeScript, you can also use a JavaScript config file, but it is better to use an editor such as VSCode that fully supports TS/JS features to avoid losing the type checking, autocompletion and option hints features mentioned below.</p></div><h2 id="config-file" tabindex="-1"><a class="header-anchor" href="#config-file" aria-hidden="true">#</a> Config File</h2><p>You need to set up a config object in the config file <code>.vuepress/config.ts</code> (or <code>.vuepress/config.js</code>) and export it.</p><p>To get correct hints, importing <code>defineUserConfig</code> from <code>vuepress</code> and wrapping the config object is recommended:</p>',8),x=e("div",{class:"language-typescript","data-ext":"ts"},[e("pre",{class:"language-typescript"},[e("code",null,[e("span",{class:"token comment"},"// .vuepress/config.ts"),n(`
`),e("span",{class:"token keyword"},"import"),n(),e("span",{class:"token punctuation"},"{"),n(" defineUserConfig "),e("span",{class:"token punctuation"},"}"),n(),e("span",{class:"token keyword"},"from"),n(),e("span",{class:"token string"},'"vuepress"'),e("span",{class:"token punctuation"},";"),n(`

`),e("span",{class:"token keyword"},"export"),n(),e("span",{class:"token keyword"},"default"),n(),e("span",{class:"token function"},"defineUserConfig"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),n(`
   `),e("span",{class:"token comment"},"// put your config here"),n(`
`),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),n(`
`)])]),e("div",{class:"highlight-lines"},[e("br"),e("div",{class:"highlight-line"}," "),e("br"),e("div",{class:"highlight-line"}," "),e("br"),e("div",{class:"highlight-line"}," ")])],-1),T=e("div",{class:"language-javascript","data-ext":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// .vuepress/config.ts"),n(`
`),e("span",{class:"token keyword"},"import"),n(),e("span",{class:"token punctuation"},"{"),n(" defineUserConfig "),e("span",{class:"token punctuation"},"}"),n(),e("span",{class:"token keyword"},"from"),n(),e("span",{class:"token string"},'"vuepress"'),e("span",{class:"token punctuation"},";"),n(`

`),e("span",{class:"token keyword"},"export"),n(),e("span",{class:"token keyword"},"default"),n(),e("span",{class:"token function"},"defineUserConfig"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),n(`
   `),e("span",{class:"token comment"},"// put your config here"),n(`
`),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),n(`
`)])]),e("div",{class:"highlight-lines"},[e("br"),e("div",{class:"highlight-line"}," "),e("br"),e("div",{class:"highlight-line"}," "),e("br"),e("div",{class:"highlight-line"}," ")])],-1),S=a(`<p>In the template, in order to avoid the configuration file being too long, we use the ESM feature natively provided by JavaScript to split the theme configuration, navigation bar and sidebar configuration into separate files.</p><p>The template extracts theme functions to <code>.vuepress/theme.js</code> and exports them via <code>export default</code>.</p><p><code>.vuepress/theme.ts</code>:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> hopeTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-theme-hope&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// We export the theme object by default</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">hopeTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// theme configuration</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Then import directly in the configuration file:</p><p><code>.vuepress/config.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//...</span>
<span class="token comment">// we introduce the theme here</span>
<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">&quot;./theme.js&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>

  <span class="token comment">// This is equivalent to \`theme: hopeTheme({/* your config */})\`</span>
  theme<span class="token punctuation">,</span>

  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can also help you understand the site configuration and theme configuration in the configuration more clearly.</p><h2 id="config-scope" tabindex="-1"><a class="header-anchor" href="#config-scope" aria-hidden="true">#</a> Config Scope</h2><h3 id="site-config" tabindex="-1"><a class="header-anchor" href="#site-config" aria-hidden="true">#</a> Site Config</h3><p>Config items in the Site Config are directly read by VuePress, have nothing to do with the theme and can take effect in all themes.</p><p>We know that every site should have its <code>lang</code>, <code>title</code> and <code>description</code> properties, so VuePress has built-in support for setting these properties.</p>`,12),V={class:"hint-container info"},P=e("p",{class:"hint-container-title"},"Site Config",-1),j={href:"https://vuejs.press/en/reference/config.html",target:"_blank",rel:"noopener noreferrer"},I=e("h3",{id:"theme-config",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#theme-config","aria-hidden":"true"},"#"),n(" Theme Config")],-1),U=e("p",null,[n("Theme config is the object you pass to "),e("code",null,"hopeTheme"),n(" function, which will be handled by VuePress Theme Hope.")],-1),z=a('<div class="hint-container tip"><p class="hint-container-title">Hints and Checks</p><p>If you are using an editor that supports TS/JS language features (such as VSCode), you can easily get option hints and checks.</p><ul><li><p>You can hover over an option to get hints:</p><p><img src="'+f+'" alt="option hint" data-mode="lightmode-only" loading="lazy"><img src="'+m+'" alt="option hint" data-mode="darkmode-only" loading="lazy"></p></li><li><p>If you enter wrong option name or invalid value, you will get error message:</p><p><img src="'+v+'" alt="Error message" data-mode="lightmode-only" loading="lazy"><img src="'+k+'" alt="Error message" data-mode="darkmode-only" loading="lazy"></p></li><li><p>You can get autocompletion while inputting:</p><p><img src="'+y+'" alt="autocomplete" data-mode="lightmode-only" loading="lazy"><img src="'+_+'" alt="Autocomplete" data-mode="darkmode-only" loading="lazy"></p></li></ul></div><h3 id="more" tabindex="-1"><a class="header-anchor" href="#more" aria-hidden="true">#</a> More</h3>',2),A={class:"hint-container info"},E=e("p",{class:"hint-container-title"},"Plugin Config",-1),N=e("code",null,"plugins.PLUGIN_NAME",-1),F={class:"hint-container info"},J=a('<p class="hint-container-title">Style Config</p><p>VuePress Theme Hope is using <code>.vuepress/styles</code> folder to store style config like other themes.</p><p>In this folder you can:</p><ul><li>Create <code>index.scss</code> to inject additional CSS styles</li><li>Create <code>config.scss</code> for styling config</li><li>Create <code>palette.scss</code> to set color and layout</li></ul>',4),L={class:"hint-container info"},Y=e("p",{class:"hint-container-title"},"Page Config",-1);function q(M,H){const p=l("CodeTabs"),r=l("ExternalLinkIcon"),o=l("RouterLink");return u(),h("div",null,[w,g(" more "),C,t(p,{id:"33",data:[{id:"TS"},{id:"JS"}],"tab-id":"language"},{title0:s(({value:i,isActive:c})=>[n("TS")]),title1:s(({value:i,isActive:c})=>[n("JS")]),tab0:s(({value:i,isActive:c})=>[x]),tab1:s(({value:i,isActive:c})=>[T]),_:1}),S,e("div",V,[P,e("p",null,[n("You can go to "),e("a",j,[n("VuePress2 → Reference → Configuration"),t(r)]),n(" to see all VuePress configuration.")])]),I,U,e("p",null,[n("You can find all the theme config in "),t(o,{to:"/config/"},{default:s(()=>[n("Config → Theme Config")]),_:1}),n(".")]),z,e("div",A,[E,e("p",null,[n("VuePress Theme Hope bundles some plugins, you can pass plugin options through "),N,n(" in theme options, see "),t(o,{to:"/config/plugins/"},{default:s(()=>[n("Config → Theme Plugin")]),_:1}),n(" for more details.")]),e("p",null,[n("If you want to use additional plugins, please import the plugin yourself and pass plugin options, see "),t(o,{to:"/cookbook/vuepress/plugin.html"},{default:s(()=>[n("VuePress → plugins")]),_:1}),n(" for details.")])]),e("div",F,[J,e("p",null,[n("For more details, see "),t(o,{to:"/config/style.html"},{default:s(()=>[n("Config → Style")]),_:1}),n(".")])]),e("div",L,[Y,e("p",null,[n("VuePress supports page scope config of specific page through YAML Frontmatter in Markdown files. For details, see "),t(o,{to:"/cookbook/tutorial/content.html#frontmatter"},{default:s(()=>[n("Project Content → Frontmatter")]),_:1}),n(" in the previous chapter.")])])])}const B=d(b,[["render",q],["__file","config.html.vue"]]);export{B as default};
